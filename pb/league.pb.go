// Code generated by protoc-gen-go.
// source: league.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Discipline struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Discipline) Reset()                    { *m = Discipline{} }
func (m *Discipline) String() string            { return proto.CompactTextString(m) }
func (*Discipline) ProtoMessage()               {}
func (*Discipline) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Discipline) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Discipline) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Level struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Level) Reset()                    { *m = Level{} }
func (m *Level) String() string            { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()               {}
func (*Level) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Level) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Level) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// League define a pelota league
type League struct {
	Name        string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Details     map[string]string `protobuf:"bytes,2,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Levels      []*Level          `protobuf:"bytes,3,rep,name=levels" json:"levels,omitempty"`
	Disciplines []*Discipline     `protobuf:"bytes,4,rep,name=disciplines" json:"disciplines,omitempty"`
}

func (m *League) Reset()                    { *m = League{} }
func (m *League) String() string            { return proto.CompactTextString(m) }
func (*League) ProtoMessage()               {}
func (*League) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *League) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *League) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *League) GetLevels() []*Level {
	if m != nil {
		return m.Levels
	}
	return nil
}

func (m *League) GetDisciplines() []*Discipline {
	if m != nil {
		return m.Disciplines
	}
	return nil
}

type GetLeaguesRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetLeaguesRequest) Reset()                    { *m = GetLeaguesRequest{} }
func (m *GetLeaguesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeaguesRequest) ProtoMessage()               {}
func (*GetLeaguesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetLeaguesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLeaguesResponse struct {
	Leagues []*League `protobuf:"bytes,1,rep,name=leagues" json:"leagues,omitempty"`
}

func (m *GetLeaguesResponse) Reset()                    { *m = GetLeaguesResponse{} }
func (m *GetLeaguesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLeaguesResponse) ProtoMessage()               {}
func (*GetLeaguesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetLeaguesResponse) GetLeagues() []*League {
	if m != nil {
		return m.Leagues
	}
	return nil
}

type CreateLeagueResponse struct {
	Code   int32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	League *League `protobuf:"bytes,2,opt,name=league" json:"league,omitempty"`
}

func (m *CreateLeagueResponse) Reset()                    { *m = CreateLeagueResponse{} }
func (m *CreateLeagueResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateLeagueResponse) ProtoMessage()               {}
func (*CreateLeagueResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CreateLeagueResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateLeagueResponse) GetLeague() *League {
	if m != nil {
		return m.League
	}
	return nil
}

type CreateLeagueRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Website string `protobuf:"bytes,2,opt,name=website" json:"website,omitempty"`
}

func (m *CreateLeagueRequest) Reset()                    { *m = CreateLeagueRequest{} }
func (m *CreateLeagueRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateLeagueRequest) ProtoMessage()               {}
func (*CreateLeagueRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CreateLeagueRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateLeagueRequest) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

type GetLeagueRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetLeagueRequest) Reset()                    { *m = GetLeagueRequest{} }
func (m *GetLeagueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeagueRequest) ProtoMessage()               {}
func (*GetLeagueRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GetLeagueRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLeagueResponse struct {
	League *League `protobuf:"bytes,1,opt,name=league" json:"league,omitempty"`
}

func (m *GetLeagueResponse) Reset()                    { *m = GetLeagueResponse{} }
func (m *GetLeagueResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLeagueResponse) ProtoMessage()               {}
func (*GetLeagueResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *GetLeagueResponse) GetLeague() *League {
	if m != nil {
		return m.League
	}
	return nil
}

type Team struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (m *Team) String() string            { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Group struct {
	Name string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Team []*Team `protobuf:"bytes,3,rep,name=team" json:"team,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetTeam() []*Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type Round struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	First  *Team  `protobuf:"bytes,2,opt,name=first" json:"first,omitempty"`
	Second *Team  `protobuf:"bytes,3,opt,name=second" json:"second,omitempty"`
	Score  string `protobuf:"bytes,4,opt,name=score" json:"score,omitempty"`
}

func (m *Round) Reset()                    { *m = Round{} }
func (m *Round) String() string            { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()               {}
func (*Round) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *Round) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Round) GetFirst() *Team {
	if m != nil {
		return m.First
	}
	return nil
}

func (m *Round) GetSecond() *Team {
	if m != nil {
		return m.Second
	}
	return nil
}

func (m *Round) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

// Tournament define a pelota league
type Tournament struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Groups map[string]*Group `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Rounds []*Round          `protobuf:"bytes,3,rep,name=rounds" json:"rounds,omitempty"`
}

func (m *Tournament) Reset()                    { *m = Tournament{} }
func (m *Tournament) String() string            { return proto.CompactTextString(m) }
func (*Tournament) ProtoMessage()               {}
func (*Tournament) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *Tournament) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tournament) GetGroups() map[string]*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Tournament) GetRounds() []*Round {
	if m != nil {
		return m.Rounds
	}
	return nil
}

type GetTournamentsRequest struct {
}

func (m *GetTournamentsRequest) Reset()                    { *m = GetTournamentsRequest{} }
func (m *GetTournamentsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTournamentsRequest) ProtoMessage()               {}
func (*GetTournamentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

type GetTournamentsResponse struct {
	Tournaments []*Tournament `protobuf:"bytes,1,rep,name=tournaments" json:"tournaments,omitempty"`
}

func (m *GetTournamentsResponse) Reset()                    { *m = GetTournamentsResponse{} }
func (m *GetTournamentsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTournamentsResponse) ProtoMessage()               {}
func (*GetTournamentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *GetTournamentsResponse) GetTournaments() []*Tournament {
	if m != nil {
		return m.Tournaments
	}
	return nil
}

type GetTournamentRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetTournamentRequest) Reset()                    { *m = GetTournamentRequest{} }
func (m *GetTournamentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTournamentRequest) ProtoMessage()               {}
func (*GetTournamentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *GetTournamentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetTournamentResponse struct {
	Tournament *Tournament `protobuf:"bytes,1,opt,name=tournament" json:"tournament,omitempty"`
}

func (m *GetTournamentResponse) Reset()                    { *m = GetTournamentResponse{} }
func (m *GetTournamentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTournamentResponse) ProtoMessage()               {}
func (*GetTournamentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *GetTournamentResponse) GetTournament() *Tournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

type CreateTournamentRequest struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Groups []*Group `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *CreateTournamentRequest) Reset()                    { *m = CreateTournamentRequest{} }
func (m *CreateTournamentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTournamentRequest) ProtoMessage()               {}
func (*CreateTournamentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *CreateTournamentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTournamentRequest) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type CreateTournamentResponse struct {
	Tournament *Tournament `protobuf:"bytes,1,opt,name=tournament" json:"tournament,omitempty"`
}

func (m *CreateTournamentResponse) Reset()                    { *m = CreateTournamentResponse{} }
func (m *CreateTournamentResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTournamentResponse) ProtoMessage()               {}
func (*CreateTournamentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *CreateTournamentResponse) GetTournament() *Tournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

func init() {
	proto.RegisterType((*Discipline)(nil), "pb.Discipline")
	proto.RegisterType((*Level)(nil), "pb.Level")
	proto.RegisterType((*League)(nil), "pb.League")
	proto.RegisterType((*GetLeaguesRequest)(nil), "pb.GetLeaguesRequest")
	proto.RegisterType((*GetLeaguesResponse)(nil), "pb.GetLeaguesResponse")
	proto.RegisterType((*CreateLeagueResponse)(nil), "pb.CreateLeagueResponse")
	proto.RegisterType((*CreateLeagueRequest)(nil), "pb.CreateLeagueRequest")
	proto.RegisterType((*GetLeagueRequest)(nil), "pb.GetLeagueRequest")
	proto.RegisterType((*GetLeagueResponse)(nil), "pb.GetLeagueResponse")
	proto.RegisterType((*Team)(nil), "pb.Team")
	proto.RegisterType((*Group)(nil), "pb.Group")
	proto.RegisterType((*Round)(nil), "pb.Round")
	proto.RegisterType((*Tournament)(nil), "pb.Tournament")
	proto.RegisterType((*GetTournamentsRequest)(nil), "pb.GetTournamentsRequest")
	proto.RegisterType((*GetTournamentsResponse)(nil), "pb.GetTournamentsResponse")
	proto.RegisterType((*GetTournamentRequest)(nil), "pb.GetTournamentRequest")
	proto.RegisterType((*GetTournamentResponse)(nil), "pb.GetTournamentResponse")
	proto.RegisterType((*CreateTournamentRequest)(nil), "pb.CreateTournamentRequest")
	proto.RegisterType((*CreateTournamentResponse)(nil), "pb.CreateTournamentResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LeagueService service

type LeagueServiceClient interface {
	// List returns all available League
	List(ctx context.Context, in *GetLeaguesRequest, opts ...grpc.CallOption) (*GetLeaguesResponse, error)
	// Create creates a new league
	Create(ctx context.Context, in *CreateLeagueRequest, opts ...grpc.CallOption) (*CreateLeagueResponse, error)
	// Get return a league
	Get(ctx context.Context, in *GetLeagueRequest, opts ...grpc.CallOption) (*GetLeagueResponse, error)
}

type leagueServiceClient struct {
	cc *grpc.ClientConn
}

func NewLeagueServiceClient(cc *grpc.ClientConn) LeagueServiceClient {
	return &leagueServiceClient{cc}
}

func (c *leagueServiceClient) List(ctx context.Context, in *GetLeaguesRequest, opts ...grpc.CallOption) (*GetLeaguesResponse, error) {
	out := new(GetLeaguesResponse)
	err := grpc.Invoke(ctx, "/pb.LeagueService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leagueServiceClient) Create(ctx context.Context, in *CreateLeagueRequest, opts ...grpc.CallOption) (*CreateLeagueResponse, error) {
	out := new(CreateLeagueResponse)
	err := grpc.Invoke(ctx, "/pb.LeagueService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leagueServiceClient) Get(ctx context.Context, in *GetLeagueRequest, opts ...grpc.CallOption) (*GetLeagueResponse, error) {
	out := new(GetLeagueResponse)
	err := grpc.Invoke(ctx, "/pb.LeagueService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeagueService service

type LeagueServiceServer interface {
	// List returns all available League
	List(context.Context, *GetLeaguesRequest) (*GetLeaguesResponse, error)
	// Create creates a new league
	Create(context.Context, *CreateLeagueRequest) (*CreateLeagueResponse, error)
	// Get return a league
	Get(context.Context, *GetLeagueRequest) (*GetLeagueResponse, error)
}

func RegisterLeagueServiceServer(s *grpc.Server, srv LeagueServiceServer) {
	s.RegisterService(&_LeagueService_serviceDesc, srv)
}

func _LeagueService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaguesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeagueServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LeagueService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeagueServiceServer).List(ctx, req.(*GetLeaguesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeagueService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeagueServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LeagueService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeagueServiceServer).Create(ctx, req.(*CreateLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeagueService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeagueServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LeagueService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeagueServiceServer).Get(ctx, req.(*GetLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeagueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LeagueService",
	HandlerType: (*LeagueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _LeagueService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LeagueService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LeagueService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "league.proto",
}

// Client API for TournamentService service

type TournamentServiceClient interface {
	// List returns all available Tournament
	List(ctx context.Context, in *GetTournamentsRequest, opts ...grpc.CallOption) (*GetTournamentsResponse, error)
	// Create creates a new tournament
	Create(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error)
	// Get return a tournament
	Get(ctx context.Context, in *GetTournamentRequest, opts ...grpc.CallOption) (*GetTournamentResponse, error)
}

type tournamentServiceClient struct {
	cc *grpc.ClientConn
}

func NewTournamentServiceClient(cc *grpc.ClientConn) TournamentServiceClient {
	return &tournamentServiceClient{cc}
}

func (c *tournamentServiceClient) List(ctx context.Context, in *GetTournamentsRequest, opts ...grpc.CallOption) (*GetTournamentsResponse, error) {
	out := new(GetTournamentsResponse)
	err := grpc.Invoke(ctx, "/pb.TournamentService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) Create(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error) {
	out := new(CreateTournamentResponse)
	err := grpc.Invoke(ctx, "/pb.TournamentService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) Get(ctx context.Context, in *GetTournamentRequest, opts ...grpc.CallOption) (*GetTournamentResponse, error) {
	out := new(GetTournamentResponse)
	err := grpc.Invoke(ctx, "/pb.TournamentService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TournamentService service

type TournamentServiceServer interface {
	// List returns all available Tournament
	List(context.Context, *GetTournamentsRequest) (*GetTournamentsResponse, error)
	// Create creates a new tournament
	Create(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error)
	// Get return a tournament
	Get(context.Context, *GetTournamentRequest) (*GetTournamentResponse, error)
}

func RegisterTournamentServiceServer(s *grpc.Server, srv TournamentServiceServer) {
	s.RegisterService(&_TournamentService_serviceDesc, srv)
}

func _TournamentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TournamentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).List(ctx, req.(*GetTournamentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TournamentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).Create(ctx, req.(*CreateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TournamentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).Get(ctx, req.(*GetTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TournamentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TournamentService",
	HandlerType: (*TournamentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TournamentService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TournamentService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TournamentService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "league.proto",
}

func init() { proto.RegisterFile("league.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0x9d, 0x9f, 0x7e, 0xbd, 0x69, 0xfb, 0xb5, 0xd3, 0x34, 0x71, 0x4d, 0x55, 0xca, 0x08,
	0x41, 0x55, 0x89, 0x84, 0x86, 0x07, 0x20, 0xaf, 0x2d, 0xaa, 0x54, 0x55, 0x15, 0x72, 0x2b, 0x1e,
	0x78, 0x41, 0x4e, 0x32, 0x44, 0x16, 0xae, 0x6d, 0xec, 0x49, 0x50, 0x85, 0x90, 0x10, 0x5b, 0x60,
	0x13, 0x6c, 0x82, 0x55, 0xb0, 0x01, 0x1e, 0x58, 0x08, 0xf3, 0x67, 0x7b, 0xec, 0xb8, 0x55, 0xc5,
	0x4b, 0x64, 0xdf, 0x9f, 0x73, 0xcf, 0x39, 0x73, 0xc7, 0x81, 0x15, 0x9f, 0xb8, 0xd3, 0x19, 0xe9,
	0x45, 0x71, 0x48, 0x43, 0x64, 0x46, 0x23, 0x7b, 0x67, 0x1a, 0x86, 0x53, 0x9f, 0xf4, 0xdd, 0xc8,
	0xeb, 0xbb, 0x41, 0x10, 0x52, 0x97, 0x7a, 0x61, 0x90, 0xc8, 0x0a, 0x3c, 0x00, 0x38, 0xf6, 0x92,
	0xb1, 0x17, 0xf9, 0x5e, 0x40, 0xd0, 0x1a, 0x98, 0xde, 0xc4, 0x32, 0xf6, 0x8c, 0xfd, 0x65, 0x87,
	0x3d, 0xa1, 0x36, 0x34, 0xa8, 0x47, 0x7d, 0x62, 0x99, 0x22, 0x24, 0x5f, 0xf0, 0x13, 0x68, 0x9c,
	0x91, 0x39, 0xf1, 0xef, 0x58, 0xfe, 0xdb, 0x80, 0xe6, 0x99, 0x60, 0x85, 0x10, 0xd4, 0x03, 0xf7,
	0x8a, 0xa8, 0x16, 0xf1, 0x8c, 0x0e, 0x61, 0x69, 0x42, 0xa8, 0xeb, 0xf9, 0x09, 0x6b, 0xab, 0xed,
	0xb7, 0x06, 0xdd, 0x5e, 0x34, 0xea, 0xc9, 0x86, 0xde, 0xb1, 0xcc, 0xbc, 0x0a, 0x68, 0x7c, 0xed,
	0xa4, 0x75, 0xe8, 0x01, 0x34, 0x7d, 0x4e, 0x20, 0xb1, 0x6a, 0xa2, 0x63, 0x59, 0x76, 0xb0, 0x88,
	0xa3, 0x12, 0xe8, 0x29, 0xb4, 0x26, 0x99, 0xae, 0xc4, 0xaa, 0x8b, 0xba, 0x35, 0x5e, 0x97, 0xcb,
	0x75, 0xf4, 0x12, 0x7b, 0x08, 0x2b, 0xfa, 0x34, 0xb4, 0x0e, 0xb5, 0x0f, 0xe4, 0x5a, 0x51, 0xe5,
	0x8f, 0x5c, 0xde, 0xdc, 0xf5, 0x67, 0x99, 0x3c, 0xf1, 0x32, 0x34, 0x5f, 0x18, 0xf8, 0x31, 0x6c,
	0x9c, 0x10, 0x2a, 0x39, 0x27, 0x0e, 0xf9, 0xc8, 0x7e, 0x69, 0x95, 0x58, 0x3c, 0x04, 0xa4, 0x17,
	0x26, 0x11, 0x3b, 0x09, 0x82, 0x1e, 0xc2, 0x92, 0x3c, 0xb6, 0x84, 0x15, 0x73, 0xa2, 0x90, 0x5b,
	0xe0, 0xa4, 0x29, 0x7c, 0x0e, 0xed, 0xa3, 0x98, 0xb8, 0x94, 0xa8, 0x44, 0xda, 0xcd, 0xe6, 0x8c,
	0xc3, 0x89, 0x9c, 0xd3, 0x70, 0xc4, 0x33, 0xc2, 0xdc, 0x21, 0x5e, 0x25, 0xb8, 0x16, 0x01, 0x55,
	0x06, 0x1f, 0xc1, 0x66, 0x11, 0xef, 0x46, 0xda, 0xc8, 0x82, 0xa5, 0x4f, 0x64, 0x94, 0x78, 0x34,
	0xd5, 0x9e, 0xbe, 0xe2, 0x47, 0xb0, 0x9e, 0x09, 0xba, 0x4d, 0xf8, 0x73, 0xcd, 0xa1, 0x8c, 0x79,
	0xce, 0xd2, 0xb8, 0x91, 0xa5, 0x0d, 0xf5, 0x4b, 0xe2, 0x5e, 0x55, 0x82, 0xbe, 0x84, 0xc6, 0x49,
	0x1c, 0xce, 0xa2, 0x4a, 0xce, 0x3b, 0x50, 0xa7, 0xac, 0x51, 0xad, 0xc8, 0x7f, 0x1c, 0x9a, 0x03,
	0x39, 0x22, 0x8a, 0x13, 0x68, 0x38, 0xe1, 0x2c, 0x98, 0x54, 0xb6, 0xee, 0x42, 0xe3, 0xbd, 0x17,
	0x27, 0x54, 0x99, 0x97, 0xf7, 0xca, 0x30, 0xda, 0x83, 0x66, 0x42, 0xc6, 0x61, 0x30, 0x61, 0xe0,
	0xc5, 0x02, 0x15, 0xe7, 0xab, 0x92, 0x8c, 0xc3, 0x98, 0xb0, 0xc5, 0x13, 0xab, 0x22, 0x5e, 0xf0,
	0x4f, 0x03, 0xe0, 0x32, 0x9c, 0xc5, 0x7c, 0x48, 0x50, 0xed, 0xf4, 0x00, 0x9a, 0x53, 0x2e, 0x29,
	0xbd, 0x0c, 0xb6, 0x80, 0xce, 0x7a, 0x7a, 0x42, 0xaf, 0xba, 0x0f, 0xaa, 0x92, 0x5f, 0x87, 0x98,
	0x6b, 0x29, 0x5c, 0x07, 0xa1, 0xce, 0x51, 0x09, 0xfb, 0x18, 0x5a, 0x5a, 0x67, 0xc5, 0x6e, 0xdf,
	0xd7, 0x77, 0x5b, 0x41, 0x88, 0x0e, 0x7d, 0xcd, 0xbb, 0xb0, 0xc5, 0x0e, 0x31, 0x67, 0x93, 0xae,
	0x3a, 0x3e, 0x85, 0x4e, 0x39, 0xa1, 0x8e, 0x98, 0xdd, 0x43, 0x9a, 0x87, 0xd5, 0x7a, 0xaf, 0x15,
	0x45, 0x39, 0x7a, 0x09, 0x3e, 0x80, 0x76, 0x01, 0xeb, 0xb6, 0xad, 0x3a, 0x29, 0x11, 0xca, 0xc6,
	0xf6, 0x00, 0x72, 0x4c, 0xb5, 0x5d, 0xe5, 0xa9, 0x5a, 0x05, 0x7e, 0x0d, 0x5d, 0x79, 0x17, 0xee,
	0x34, 0x97, 0x3b, 0x5e, 0x38, 0x25, 0xcd, 0x2e, 0x95, 0x60, 0x96, 0x58, 0x8b, 0x88, 0xff, 0xc6,
	0x6e, 0xf0, 0xd5, 0x84, 0x55, 0x79, 0x2d, 0x2e, 0x48, 0x3c, 0xf7, 0xc6, 0x04, 0x9d, 0x42, 0xfd,
	0xcc, 0x63, 0xe4, 0xb6, 0xc4, 0xe0, 0xf2, 0xa7, 0xc7, 0xee, 0x94, 0xc3, 0x72, 0x30, 0xde, 0xfc,
	0xf6, 0xeb, 0xcf, 0x77, 0x73, 0x15, 0xb5, 0xfa, 0xf3, 0xc3, 0xbe, 0xfa, 0xae, 0xa0, 0x0b, 0x68,
	0x4a, 0xa6, 0x48, 0x7c, 0x79, 0x2b, 0xbe, 0x09, 0xb6, 0xb5, 0x98, 0x50, 0x88, 0x1d, 0x81, 0xb8,
	0x8e, 0x75, 0xc4, 0xa1, 0x71, 0x80, 0xce, 0xa1, 0xc6, 0xe6, 0xa3, 0x76, 0x81, 0x48, 0x0a, 0xb7,
	0x55, 0x8a, 0x2a, 0x2c, 0x5b, 0x60, 0xb5, 0x11, 0xd2, 0xb0, 0xfa, 0x9f, 0xb9, 0x07, 0x5f, 0x06,
	0x3f, 0x4c, 0xd8, 0xc8, 0xdd, 0x49, 0x6d, 0x78, 0xa3, 0x6c, 0xd8, 0x56, 0x80, 0x8b, 0xab, 0x69,
	0xdb, 0x55, 0x29, 0x35, 0xb0, 0x2b, 0x06, 0x6e, 0xa0, 0xff, 0xf9, 0x40, 0x6d, 0x07, 0xd1, 0xbb,
	0xcc, 0x92, 0x7b, 0xb9, 0xf2, 0x85, 0xd5, 0xb0, 0x77, 0xaa, 0x93, 0x45, 0x39, 0xb8, 0x8c, 0xce,
	0xed, 0x79, 0x2b, 0xed, 0xb1, 0x16, 0xc8, 0xa5, 0xd0, 0xdb, 0x15, 0x19, 0x85, 0xbb, 0x2b, 0x70,
	0x2d, 0xd4, 0x29, 0xe1, 0x2a, 0xab, 0x46, 0x4d, 0xf1, 0xcf, 0xfe, 0xec, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x70, 0xa1, 0xbb, 0x32, 0x0b, 0x08, 0x00, 0x00,
}
