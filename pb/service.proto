// Copyright (C) 2016, 2017 Nicolas Lamirault <nicolas.lamirault@gmail.com>

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

package pb;

// for grpc-gateway
import "google/api/annotations.proto";

message Discipline {
  string id = 1;
  string title = 2;
}

message Level {
  string id = 1;
  string title = 2;
}

// League define a pelota league
message League {
  string name = 1;
  map<string, string> details = 2;
  repeated Level levels = 3;
  repeated Discipline disciplines = 4;
}

message GetLeaguesRequest {
  string name = 1;
}

message GetLeaguesResponse {
  repeated League leagues = 1;
}


message CreateLeagueResponse {
  int32 code = 1;
  League league = 2;
}

message CreateLeagueRequest {
  string name = 1;
  string website = 2;
}


message GetLeagueRequest {
  string name = 1;
}

message GetLeagueResponse {
  League league = 1;
}


// League service defines the public APIs for leagues.
service LeagueService {

  // List returns all available League
  rpc List(GetLeaguesRequest) returns (GetLeaguesResponse) {
    option (google.api.http) = {
      get: "/v1/leagues"
    };
  }

  // Create creates a new league
  rpc Create(CreateLeagueRequest) returns (CreateLeagueResponse) {
    option (google.api.http) = {
      post: "/v1/leagues"
      body: "*"
    };
  }

  // Get return a league
  rpc Get(GetLeagueRequest) returns (GetLeagueResponse) {
    option (google.api.http) = {
      get: "/v1/leagues/{name}"
    };
  }

}

// Tournament service


message Team {
  string name = 1;
}

message Group {
  string name = 1;
  repeated Team team = 3;
}

message Round {
  string name = 1;
  Team first = 2;
  Team second = 3;
  string score = 4;
}

// Tournament define a pelota league
message Tournament {
  string name = 1;
  map<string, Group> groups = 2;
  repeated Round rounds = 3;
  /* string begin = 2; */
  /* string end = 3; */
}

message GetTournamentsRequest {
}

message GetTournamentsResponse {
  repeated Tournament tournaments = 1;
}

message GetTournamentRequest {
  string name = 1;
}

message GetTournamentResponse {
  Tournament tournament = 1;
}

message CreateTournamentRequest {
  string name = 1;
  repeated Group groups = 2;
}

message CreateTournamentResponse {
  Tournament tournament = 1;
}

service TournamentService {

  // List returns all available Tournament
  rpc List(GetTournamentsRequest) returns (GetTournamentsResponse) {
    option (google.api.http) = {
      get: "/v1/tournaments"
    };
  }

  // Create creates a new tournament
  rpc Create(CreateTournamentRequest) returns (CreateTournamentResponse) {
    option (google.api.http) = {
      post: "/v1/tournaments"
      body: "*"
    };
  }

  // Get return a tournament
  rpc Get(GetTournamentRequest) returns (GetTournamentResponse) {
    option (google.api.http) = {
      get: "/v1/tournaments/{name}"
    };
  }

}